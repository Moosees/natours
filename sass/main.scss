// Variables
$color-primary: #7ed56f;
$color-primary-light: #55c57a;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;
// Browser reset without normalize.css, the * marker does not include pseudo elements, so we add those as well
*,
*::after,
*::before {
    padding: 0;
    margin: 0;
    box-sizing: inherit; // use inherited box-sizing as default for all elements, without this line box-sizing is not inherited
}

html {
    font-size: 62.5%; // sets root font size to a easy to handle value for use with rems, 62.5% is equial to 10px if user settings is 16px (most common)
}

// everything on body is inherited by children, better practise to use inheritance than apply on everything
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    line-height: 1.7;
    color: $color-grey-dark;
    padding: 3rem; // padding is not inherited
    box-sizing: border-box; // border-box makes borders and padding not add to the total size of elements, body box-sizing sets the default method to use
}

.header {
    height: 95vh; // vh means % of viewport
    background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.8)), url(../img/hero.jpg); // we can use several backgrounds at the same time, first mentioned is on top
    background-size: cover;
    background-position: top; // makes top of image align with top of viewport
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); // use a polygon to crop the size of the background
    position: relative; // .header is parent of .logo-box, so we use relative posisition to be able to use it as a reference when positioning the children
}

.header__logo-box {
    position: absolute; // the point of origin for top, left.. when using absolute position is the parent element, if it isn't also absolute
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    // magic trick to center elements (or 40% from top in this case)
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; // centers the button (it's inline-block)
}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;
    backface-visibility: hidden; // fix for shaky animations
    margin-bottom: 6rem; // gives space between h1 and button
}

.heading-primary--main {
    display: block; // spans are inline as deafault, changing it to block puts it on it's own line by letting it occypy 100% of the parent element width
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft; // links an animation to an element, can be used on special selectors like :hover
    animation-duration: 1.2s;
    animation-timing-function: ease-out;
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1.2s 0.15s ease-out; // short format for animation (third param is delay)
}

// Syntax for defining animations. The %-values defines points in the animation lifecycle where something should happen
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    80% {
        transform: translateX(1rem);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translateX(-1rem);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(4rem);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

// :link pseudo class adds the special link state (not visited),
// :visited in the same declaration to not change anything when visited
.btn:link,
.brn:visited {
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem; // first top and bottom, second left and right
    display: inline-block;
    border-radius: 10rem; // round edges
    transition: all 0.2s;
    position: relative; // set to relative so the ::after have something to relate to
    backface-visibility: hidden;
}

// hover pseudo class shows when mouse is over the element
.btn:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2); // x-offset, y-offset, blur, color
}

// active pseudo class is used when the element is clicked
.btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
}

// after creates a pseudo element that is (the last) child of the element
.btn::after {
    // we need to specify content and display on ::after pseudo elements or they won't show up
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1; // moves ::after behind the parent
    transition: all 0.4s;
}

// hover and after can be combined
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--white {
    background-color: $color-white;
    color: $color-grey-dark;
}

.btn--white::after {
    background-color: $color-white;
}

.btn--move-in-bottom {
    animation: moveInBottom 0.5s 0.5s ease-out;
    animation-fill-mode: backwards; // will apply the 0% animation properties at page load
}